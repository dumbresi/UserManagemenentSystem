name: Packer Build Workdflow

on:
  push:
    branches: ["main"]

jobs:
    packer-build:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Setup Packer
            uses: hashicorp/setup-packer@main
            id: setup_packer
    
          - name: Packer Init
            id: init_packer
            run: "packer init ./packer/packer.pkr.hcl"
          
          - name: AWS Credentials Configuration
            uses: aws-actions/configure-aws-credentials@v4
            with:
              # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              # aws-region: ${{ secrets.AWS_AMI_REGION}}

              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_AMI_REGION}}

          - name: Run Packer Build
            env:
              PKR_VAR_ami_name: ${{ secrets.AMI_NAME }}
              PKR_VAR_instance_type: ${{secrets.AMI_INSTANCE_TYPE}}
              PKR_VAR_ami_region: ${{secrets.AWS_AMI_REGION}}
              PKR_VAR_aws_profile: ${{secrets.AWS_PROFILE}}
              PKR_VAR_source_ami: ${{secrets.SOURCE_AMI}}
              PKR_VAR_ssh_username: ${{secrets.AMI_SSH_USERNAME}}
              PKR_VAR_ami_shared_users: "[${{ secrets.AWS_DEMO_ACCOUNT_ID }}]"
              PKR_VAR_subnet_id: "${{secrets.AWS_SUBNET_ID}}"
            run: |
              GOOS=linux GOARCH=amd64 go build -o webapp main.go

              cd packer
              packer build packer.pkr.hcl

              echo "packer built passed"

          - name: Get Latest AMI ID
            id: get_latest_ami
            run: |
                LATEST_AMI=$(aws ec2 describe-images \
                  --owners self \
                  --filters "Name=name,Values=my-ami-prefix*" \
                  --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
                  --output text)
                echo "LATEST_AMI=$LATEST_AMI" >> $GITHUB_ENV
        
            # Step 3: Create a New Launch Template Version with the Latest AMI
          - name: Create New Launch Template Version
            id: create_lt_version
            run: |
                NEW_VERSION=$(aws ec2 create-launch-template-version \
                  --launch-template-id lt-1234567890abcdef \
                  --source-version $LATEST_VERSION \
                  --launch-template-data "{\"ImageId\":\"${{ env.LATEST_AMI }}\"}" \
                  --query "LaunchTemplateVersion.VersionNumber" \
                  --output text)
                echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
            # Step 4: Update Auto Scaling Group with the New Launch Template Version
          - name: Update Auto Scaling Group
            run: |
                aws autoscaling update-auto-scaling-group \
                  --auto-scaling-group-name my-asg \
                  --launch-template "LaunchTemplateId=lt-1234567890abcdef,Version=${{ env.NEW_VERSION }}"
        
            # Step 5: Start Instance Refresh
          - name: Start Instance Refresh
            id: start_refresh
            run: |
                REFRESH_ID=$(aws autoscaling start-instance-refresh \
                  --auto-scaling-group-name my-asg \
                  --query "InstanceRefreshId" --output text)
                echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
        
            # Step 6: Wait for Instance Refresh to Complete
          - name: Wait for Instance Refresh to Complete
            run: |
                while true; do
                  STATUS=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name my-asg \
                    --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.REFRESH_ID }}'].Status" \
                    --output text)
                  echo "Current Status: $STATUS"
                  if [[ "$STATUS" == "Successful" ]]; then
                    echo "Instance refresh completed successfully."
                    break
                  elif [[ "$STATUS" == "Failed" ]]; then
                    echo "Instance refresh failed."
                    exit 1
                  fi
                  sleep 30 # Wait 30 seconds before checking again
                done